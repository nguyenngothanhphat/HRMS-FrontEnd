import React, { Component, Fragment } from 'react';
import { Row, Col, DatePicker, Button, Input } from 'antd';
import ModalRequestChangeLWD from '@/components/ModalRequestChangeLWD';
import { connect } from 'umi';
import moment from 'moment';
import editIcon from '@/assets/edit-off-boarding.svg';
import styles from './index.less';

const dateFormat = 'MM.DD.YY';
const { TextArea } = Input;

@connect(({ offboarding: { myRequest = {} } = {}, loading }) => ({
  myRequest,
  loading: loading.effects['offboarding/requestChangeLWD'],
}))
class RequestChangeLWD extends Component {
  constructor(props) {
    super(props);
    this.state = {
      visible: false,
      keyModal: '',
      q: '',
      isEdit: false,
    };
  }

  componentDidMount() {
    const { myRequest: { commentRequestLastDate: q = '' } = {} } = this.props;
    this.setState({
      q,
    });
  }

  handleModal = () => {
    const { visible } = this.state;
    this.setState({
      visible: !visible,
      keyModal: !visible ? '' : Date.now(),
    });
  };

  handleOpenEdit = () => {
    this.setState({ isEdit: true });
  };

  handleCloseEdit = () => {
    const { myRequest: { commentRequestLastDate: q = '' } = {} } = this.props;
    this.setState({ isEdit: false, q });
  };

  handleChange = (e) => {
    this.setState({
      q: e.target.value,
    });
  };

  submitRequest = (values) => {
    const { dispatch, myRequest: { _id: id = '' } = {} } = this.props;
    const { commentRequestLastDate = '', requestLastDate = '' } = values;
    const payload = {
      id,
      requestLastDate: moment(requestLastDate),
      commentRequestLastDate,
    };

    dispatch({
      type: 'offboarding/requestChangeLWD',
      payload,
    }).then(({ statusCode }) => {
      if (statusCode === 200) {
        this.handleModal();
      }
    });
  };

  saveComment = () => {
    const { q: commentRequestLastDate = '' } = this.state;
    const { dispatch, myRequest: { _id: id = '', requestLastDate = '' } = {} } = this.props;
    const payload = {
      id,
      requestLastDate: moment(requestLastDate),
      commentRequestLastDate,
    };
    dispatch({
      type: 'offboarding/requestChangeLWD',
      payload,
      isUpdate: true,
    });
  };

  render() {
    const { myRequest: { lastWorkingDate = '', requestLastDate = '' } = {}, loading } = this.props;
    const { visible, keyModal, isEdit, q } = this.state;
    const dateValue = moment(lastWorkingDate).format('YYYY/MM/DD');
    return (
      <>
        <div className={styles.viewChangeLastWorkingDay}>
          <div className={styles.viewChangeLastWorkingDay__title}>
            <span>Resignation request details</span>
          </div>
          <div className={styles.contentContainer}>
            <span className={styles.viewChangeLastWorkingDay__label}>
              Last working day (generated by system)
            </span>
            <Row className={styles.viewChangeLastWorkingDay__viewDateApproved} gutter={[50, 0]}>
              <Col span={8}>
                <DatePicker
                  value={dateValue ? moment(dateValue) : null}
                  format={dateFormat}
                  className={styles.viewChangeLastWorkingDay__viewDateApproved__datePicker}
                  disabled
                />
              </Col>
              <Col
                span={16}
                className={styles.viewChangeLastWorkingDay__viewDateApproved__description}
              >
                <div className={styles.notice}>
                  <span className={styles.content}>
                    The LWD is generated as per a 90 days period according to our{' '}
                    <span className={styles.link}>Standard Offboarding Policy</span>
                  </span>
                </div>
              </Col>
            </Row>
          </div>
          <div className={styles.bottomPart}>
            {!requestLastDate ? (
              <Button
                type="primary"
                onClick={this.handleModal}
                className={styles.viewChangeLastWorkingDay__button}
              >
                Extend or shorten LWD
              </Button>
            ) : (
              <div className={styles.viewChangeLastWorkingDay__textMessage}>
                <span className={styles.viewChangeLastWorkingDay__textMessage__bold}>
                  Extend and shorten LWD is sent to HR Manager
                </span>
                <span className={styles.viewChangeLastWorkingDay__textMessage__date}>
                  {requestLastDate && moment(requestLastDate).format('MM.DD.YY')}
                </span>
              </div>
            )}
          </div>
        </div>
        {requestLastDate && (
          <div className={styles.viewComment}>
            <div className={styles.viewTop}>
              <div className={styles.viewTop__name}>
                <span>Reporting managerâ€™s comments extend or shorten LWD</span>
              </div>
              <div className={styles.viewTop__right}>
                {!isEdit && (
                  <div className={styles.viewTop__right__edit} onClick={this.handleOpenEdit}>
                    <img style={{ margin: '0 2px 2px 0' }} src={editIcon} alt="edit-icon" />
                    <span>Edit</span>
                  </div>
                )}
                {/* <div className={styles.viewTop__right__time}>22.05.20 | 12PM</div> */}
              </div>
            </div>
            <div className={styles.textArea}>
              <TextArea
                className={styles.boxComment}
                value={q}
                onChange={this.handleChange}
                disabled={!isEdit}
              />
            </div>
            {isEdit && (
              <div className={styles.viewBottom}>
                <Button className={styles.btnCancel} onClick={this.handleCloseEdit}>
                  Cancel
                </Button>
                <Button
                  loading={loading}
                  disabled={!q}
                  className={styles.btnSubmit}
                  onClick={this.saveComment}
                >
                  Submit
                </Button>
              </div>
            )}
          </div>
        )}

        <ModalRequestChangeLWD
          loading={loading}
          visible={visible}
          key={keyModal}
          handleCancel={this.handleModal}
          handleSubmit={this.submitRequest}
        />
      </>
    );
  }
}

export default RequestChangeLWD;
