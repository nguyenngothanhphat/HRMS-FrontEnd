# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
  - cypress-test-dev
  - build-dev
  - build-staging
  - build-production
  - deploy-dev
  - deploy-staging
  - deploy-production

build-job-dev:       # This job runs in the build stage, which runs first.
  stage: build-dev
  tags:
    - dev-worker
  script:
    - source /etc/environment
    - npm install
    - npm run build
    - docker login -u khoa.le -p $PWD gitlab.paxanimi.ai:8150
    - docker build -t gitlab.paxanimi.ai:8150/hrms/hrms-frontend:dev-$CI_PIPELINE_ID -f Dockerfile .
    - docker push gitlab.paxanimi.ai:8150/hrms/hrms-frontend:dev-$CI_PIPELINE_ID
    - docker rmi gitlab.paxanimi.ai:8150/hrms/hrms-frontend:dev-$CI_PIPELINE_ID
  only:
    - dev

build-job-staging:       # This job runs in the build stage, which runs first.
  stage: build-staging
  tags:
    # - staging-worker
    - master
  script:
    - source /etc/environment
    - npm install
    - npm run build
    - docker login -u khoa.le -p $PWD gitlab.paxanimi.ai:8150
    - docker build -t gitlab.paxanimi.ai:8150/hrms/hrms-frontend:staging-$CI_PIPELINE_ID -f Dockerfile .
    - docker push gitlab.paxanimi.ai:8150/hrms/hrms-frontend:staging-$CI_PIPELINE_ID
    - docker rmi gitlab.paxanimi.ai:8150/hrms/hrms-frontend:staging-$CI_PIPELINE_ID
  only:
    - staging

build-job-production:       # This job runs in the build stage, which runs first.
  stage: build-production
  tags:
    - production-runner
  script:
    - source /etc/environment
    - npm install
    - mv ./config/proxy-pd.js ./config/proxy.js
    - npm run build
    - docker login -u khoa.le -p $PWD gitlab.paxanimi.ai:8150
    - docker build -t gitlab.paxanimi.ai:8150/hrms/hrms-frontend:production-$CI_PIPELINE_ID -f Dockerfile .
    - docker push gitlab.paxanimi.ai:8150/hrms/hrms-frontend:production-$CI_PIPELINE_ID
    - docker rmi gitlab.paxanimi.ai:8150/hrms/hrms-frontend:production-$CI_PIPELINE_ID
  only:
    - production

deploy-job-dev:
  stage: deploy-dev
  tags:
    - dev-master
  script:
    - kubectl patch deployment frontend-deployment -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"frontend\", \"image\":\"gitlab.paxanimi.ai:8150/hrms/hrms-frontend:dev-$CI_PIPELINE_ID\"}]}}}}"
  only:
    - dev

deploy-job-staging:
  stage: deploy-staging
  tags:
    # - staging-master
    - master
  script:
    - kubectl patch deployment frontend-deployment -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"frontend\", \"image\":\"gitlab.paxanimi.ai:8150/hrms/hrms-frontend:staging-$CI_PIPELINE_ID\"}]}}}}"
  only:
    - staging

deploy-job-production:
  stage: deploy-production
  tags:
    - production-runner
  script:
    - kubectl patch deployment frontend-deployment -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"frontend\", \"image\":\"gitlab.paxanimi.ai:8150/hrms/hrms-frontend:production-$CI_PIPELINE_ID\"}]}}}}"
  only:
    - production

cypress-test-dev:

  #image: cypress/browsers:node14.17.6-chrome100-ff98
  stage: cypress-test-dev
  script:
    - npx cypress info
    #- source /etc/environment
    #- docker login -u khoa.le -p $PWD gitlab.paxanimi.ai:8150
    - npm install --save-dev
    - npm install cypress
    - npm install --save-dev cypress-file-upload
    - cd tests/ui_automation_hrms
    - npx cypress run --record --key 6840a7e8-277a-442b-90fb-2101274fd849 --headless
  tags:
    - master
  only:
    - dev
  allow_failure: true

